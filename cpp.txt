{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// TM_SELECTED_TEXT The currently selected text or the empty string
	// TM_CURRENT_LINE The contents of the current line
	// TM_CURRENT_WORD The contents of the word under cursor or the empty string
	// TM_LINE_INDEX The zero-index based line number
	// TM_LINE_NUMBER The one-index based line number
	// TM_FILENAME The filename of the current document
	// TM_FILENAME_BASE The filename of the current document without its extensions
	// TM_DIRECTORY The directory of the current document
	// TM_FILEPATH The full file path of the current document
	// CLIPBOARD The contents of your clipboard
	// CURRENT_YEAR The current year
	// CURRENT_YEAR_SHORT The current year's last two digits
	// CURRENT_MONTH The month as two digits (example '02')
	// CURRENT_MONTH_NAME The full name of the month (example 'July')
	// CURRENT_MONTH_NAME_SHORT The short name of the month (example 'Jul')
	// CURRENT_DATE The day of the month
	// CURRENT_DAY_NAME The name of day (example 'Monday')
	// CURRENT_DAY_NAME_SHORT The short name of the day (example 'Mon')
	// CURRENT_HOUR The current hour in 24-hour clock format
	// CURRENT_MINUTE The current minute
	// CURRENT_SECOND The current second

	// "scope": "c,cpp"
	// ${1|one,two,three|}

	"Default": {
        "prefix": "cpp",
        "body": [
          "#include <${1:iostream}>",
          "\nusing namespace std;",
          "\nint main() {"
		  "\n\t$0"
		  "\n\treturn 0;"
		  "}"
        ],
        "description": "Set default code structure"
    },

    "Competitive": {
        "prefix": "pc",
        "body": [
          "#include <bits/stdc++.h>",
          "\nusing namespace std;",
          "\nint main() {"
		  "\n\t$0"
		  "\n\treturn 0;"
		  "}"
        ],
        "description": "Set default competitive structure"
    },

	"Header": {
        "prefix": "hpp",
        "body": [
          "#ifndef $1",
          "#define $1",
          "\n$0"
		  "\n#endif"
        ],
        "description": "Set default header structure"
    },

	"Class": {
		"prefix": "c",
		"body": [
			"class ${1:Class} {"
			"\n\tprivate:"
			"\n\t\t$2"
			"\n\tpublic:"
			"\n\t\t$0"
			"};"
		],
		"description": "class"
	}

	"For": {
		"prefix": "fr",
		"body": [
			"for(${1:int} ${2:i} = 0; $2 < ${3:N}; $2++) {"
			"\t$0"
			"}"
		],
		"description": "for"
	}

	"For Reverse": {
		"prefix": "frr",
		"body": [
			"for(${1:int} ${2:i} = ${3:N}; $2 > 0; $2--) {"
			"\t$0"
			"}"
		],
		"description": "for"
	}

	"While": {
		"prefix": "we",
		"body": [
			"while($1) {"
			"\t$0"
			"}"
		],
		"description": "while"
	}

	"Do While": {
		"prefix": "dw",
		"body": [
			"do {"
			"\t$0"
			"} while($1);"
		],
		"description": "do while"
	}

	"If": {
		"prefix": "if",
		"body": [
			"if($1) {"
			"\t$0"
			"}"
		],
		"description": "if"
	}

	"Else": {
		"prefix": "e",
		"body": [
			"else {"
			"\t$0"
			"}"
		],
		"description": "else"
	}

	"Scanf": {
		"prefix": "scf",
		"body": [
			"scanf(\"%$1\", &$2);$0"
		],
		"description": "scanf"
	}

	"Printf": {
		"prefix": "prf",
		"body": [
			"printf(\"%$1\", $2);$0"
		],
		"description": "printf"
	}

	"Throw": {
		"prefix": "th",
		"body": [
			"throw invalid_argument($0);"
		],
		"description": "throw"
	}

	"Using Namespace": {
		"prefix": "un",
		"body": [
			"using namespace ${1:std};"
			"\n$0"
		],
		"description": "using namespace"
	}

	"Test": {
		"prefix": "tt",
		"body": [
			"${TM_FILENAME/(.*)\\..+$/$1/}"
		],
		"description": "test"
	}
}
